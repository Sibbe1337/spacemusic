apiVersion: litmuschaos.io/v1alpha1
kind: ChaosEngine
metadata:
  name: {{ .Values.chaosengine.name | default "random-pod-kill-engine" }}
  namespace: {{ .Values.chaosengine.namespace | default "litmus" }} # Litmus control plane namespace
spec:
  engineState: {{ .Values.chaosengine.engineState | default "active" }}
  # Service account used by the chaos experiment
  chaosServiceAccount: {{ .Values.chaosengine.serviceAccount | default "litmus-admin" }}
  # Define the application info (optional, but good practice)
  appinfo:
    appns: {{ .Values.targetApplication.namespace | quote }}
    applabel: {{ .Values.targetApplication.labelSelector | quote }} # e.g., 'app in (valuation, payouts, offers)'
    appkind: {{ .Values.targetApplication.kind | default "deployment" }}
  # Experiments to be executed
  experiments:
  - name: {{ .Values.experiment.name | default "pod-delete-random-apps" }}
    spec:
      # Defines the chaos experiment (name should match a ChaosExperiment CR)
      # This assumes 'pod-delete' experiment from the hub is installed
      components:
        # Environment variables for the pod-delete experiment
        env:
        - name: TOTAL_CHAOS_DURATION
          value: {{ .Values.experiment.duration | default "300" | quote }}
        - name: CHAOS_INTERVAL
          value: {{ .Values.experiment.interval | default "60" | quote }}
        - name: PODS_AFFECTED_PERC
          value: {{ .Values.experiment.podsAffectedPerc | default "50" | quote }}
        # Target application details
        - name: APP_NAMESPACE
          value: {{ .Values.targetApplication.namespace | quote }}
        - name: LABEL_SELECTOR
          value: {{ .Values.targetApplication.labelSelector | quote }}
        - name: RAMP_TIME
          value: {{ .Values.experiment.rampTime | default "" | quote }}
        - name: SEQUENCE
          value: 'parallel' # 'serial' or 'parallel' for multiple pods
        - name: INSTANCE_ID
          value: '' # Optional: A unique ID for the chaos run

        # Probes to check application health/SLOs
        {{- with .Values.experiment.probe }}
        probe:
        - name: {{ .name | default "check-slo-alert-status" }}
          type: {{ .type | default "promProbe" }}
          {{ .type | default "promProbe" }}/inputs:
            endpoint: {{ .inputs.endpoint | quote }}
            query: {{ .inputs.query | quote }}
            comparator:
              type: {{ .inputs.comparator.type | default "==" | quote }}
              value: {{ .inputs.comparator.value | default "1" | quote }}
          mode: {{ .mode | default "EOT" }}
          runProperties:
            probeTimeout: {{ .runProperties.probeTimeout | default 60 }}
            interval: {{ .runProperties.interval | default 20 }}
            retry: {{ .runProperties.retry | default 3 }}
            initialDelaySeconds: {{ .runProperties.initialDelaySeconds | default 30 }}
        {{- end }}

  # Default is "delete", which cleans up chaos resources after execution
  jobCleanUpPolicy: {{ .Values.chaosengine.jobCleanUpPolicy | default "delete" }}
  # Monitoring (optional) - Ensure your ChaosExporter is set up if you use this
  # monitoring: false 