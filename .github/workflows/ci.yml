name: CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    name: Run Linters and Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
        node-version: ['18.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          # Install service-specific Python dependencies for tests if needed
          # Example: if services/offers/tests require offers service deps:
          # pip install -r services/offers/requirements.txt

      - name: Lint Python with Ruff
        run: ruff check .

      - name: Run Python tests with Pytest and Generate Coverage Report
        run: |
          pip install coverage # Ensure coverage is explicitly available if not pulled by pytest-cov directly in all contexts
          pytest --cov=. --cov-report=xml --cov-report=html -q tests/

      - name: Upload Python Coverage HTML Report
        uses: actions/upload-artifact@v4
        if: success() || failure() # Upload report even if tests fail to see coverage
        with:
          name: python-coverage-report
          path: htmlcov/ # Default output directory for pytest-cov html report
          retention-days: 7

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # cache: 'pnpm' # Optional: Caching for pnpm

      - name: Install admin_ui dependencies (using pnpm)
        run: |
          corepack enable
          cd services/admin_ui
          pnpm install

      - name: Test admin_ui (using pnpm)
        run: |
          cd services/admin_ui
          pnpm test

      - name: Build admin_ui (using pnpm)
        if: success()
        run: |
          cd services/admin_ui
          pnpm build

      - name: Set up Helm
        uses: azure/setup-helm@v4 # Using a popular action to install Helm
        with:
          version: 'v3.18.0' # Specify a Helm version consistent with your local

      - name: Lint Helm Charts
        run: |
          echo "Linting Helm charts..."
          cd infra/helm
          for chart_dir in offers payouts docgen event-consumer valuation api-gateway; do
            if [ -d "$chart_dir" ]; then
              echo "Linting chart in $chart_dir..."
              helm lint "$chart_dir"
            else
              echo "Skipping lint for $chart_dir: directory not found or not a chart."
            fi
          done 